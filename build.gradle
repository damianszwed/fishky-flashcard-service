buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'checkstyle'
    id 'net.ltgt.apt' version '0.10'
    id 'com.github.spotbugs' version '1.6.5'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.springframework.boot' version '2.0.6.RELEASE'
    id 'info.solidsoft.pitest' version '1.4.0'
    id 'com.palantir.docker' version '0.25.0'
}

ext {
    junitPlatformVersion = '1.2.0'
    junitJupiterVersion = '5.2.0'
    mockitoVersion = '2.21.0'
    sleuthVersion = '2.0.1.RELEASE'
    zipkinVersion = '2.0.1.RELEASE'
}

group = 'com.github.damianszwed'

jar {
    baseName = 'fishky-proxy'
}

checkstyle {
    toolVersion = '8.14'
}

test {
    useJUnitPlatform()
}

spotbugs {
    toolVersion = "3.1.8"
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    omitVisitors = ["FindNonShortCircuit"]
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

docker {
    name "${jar.baseName}:${version}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    compile 'io.vavr:vavr:0.9.0'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'io.projectreactor:reactor-test'
    testCompile "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    compile 'org.projectlombok:lombok:1.18.2'
    apt 'org.projectlombok:lombok:1.18.2'
}

task updateVersion << {
    ant.replaceregexp(match:'image: fishky-proxy:(.*)', replace:"image: fishky-proxy:${version}", flags:'g', byline:true) {
        fileset(dir: '.', includes: 'kubernetes-deployment.yaml')
    }
}

task kubernetesDeployment(type:Exec) {
    commandLine 'kubectl', 'apply', '-f', 'kubernetes-deployment.yaml'
}

task kubernetesService(type:Exec) {
    commandLine 'kubectl', 'apply', '-f', 'kubernetes-service.yaml'
}

task tagDockerImage(type:Exec) {
    commandLine 'docker', 'tag', "fishky-proxy:${version}", "damianiero/fishky-proxy:${version}"
}

task pushDockerImage(type:Exec) {
    dependsOn tagDockerImage
    commandLine 'docker', 'push', "damianiero/fishky-proxy:${version}"
}

task deployByKubernetes {
    dependsOn kubernetesService, kubernetesDeployment, pushDockerImage, 'docker', build, updateVersion
    build.mustRunAfter updateVersion
}

task deployByLocalKubernetes {
    dependsOn kubernetesService, kubernetesDeployment, 'docker', build, updateVersion
    build.mustRunAfter updateVersion
}

task deleteKubernetesDeployment(type:Exec) {
    commandLine 'kubectl', 'delete', '-f', 'kubernetes-deployment.yaml'
}

task deleteKubernetesService(type:Exec) {
    commandLine 'kubectl', 'delete', '-f', 'kubernetes-service.yaml'
}

task undeploy {
    dependsOn deleteKubernetesDeployment, deleteKubernetesService
}