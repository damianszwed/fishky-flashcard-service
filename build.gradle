buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.7.1'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'org.springframework.boot' version '2.7.2'
    id 'info.solidsoft.pitest' version '1.7.4'
    id 'com.palantir.docker' version '0.34.0'
}

group = 'com.github.damianszwed'
sourceCompatibility = 1.11
targetCompatibility = 1.11

checkstyle {
    toolVersion = '10.3.1'
}

test {
    useJUnitPlatform()
}

spotbugs {
    toolVersion = '4.0.2'
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    omitVisitors = ["FindNonShortCircuit"]
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
}

jar {
    enabled = false
    archiveClassifier.set('')
}

docker {
    name "${jar.archiveBaseName.get()}:${version}"
    files jar.archiveFile
    buildArgs(['JAR_FILE': "${jar.archiveFileName.get()}"])
}

pitest {
    junit5PluginVersion = '0.16'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'

    implementation 'io.vavr:vavr:0.10.4'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

task updateVersion {
    doLast {
        ant.replaceregexp(match: 'image: damianiero/fishky-flashcard-service:(.*)', replace: "image: damianiero/fishky-flashcard-service:${version}", flags: 'g', byline: true) {
            fileset(dir: '.', includes: 'kubernetes-deployment.yaml')
        }
    }
}

task kubernetesDeployment(type: Exec) {
    commandLine 'kubectl', 'apply', '-f', 'kubernetes-deployment.yaml'
}

task kubernetesService(type: Exec) {
    commandLine 'kubectl', 'apply', '-f', 'kubernetes-service.yaml'
}

task tagDockerImage(type: Exec) {
    commandLine 'docker', 'tag', "fishky-flashcard-service:${version}", "damianiero/fishky-flashcard-service:${version}"
}

task pushDockerImage(type: Exec) {
    dependsOn tagDockerImage
    commandLine 'docker', 'push', "damianiero/fishky-flashcard-service:${version}"
}

/**
 * To check the order of the tasks you should invoke:
 * ./gradlew deployByKubernetes --dry-run
 */
task deployByKubernetes {
    dependsOn kubernetesService, kubernetesDeployment, pushDockerImage, 'docker', build, updateVersion
    build.mustRunAfter updateVersion
    tasks.docker.mustRunAfter build
    pushDockerImage.mustRunAfter tasks.docker
    kubernetesDeployment.mustRunAfter pushDockerImage
}

task deployByLocalKubernetes {
    dependsOn kubernetesService, kubernetesDeployment, 'docker', build, updateVersion
    build.mustRunAfter updateVersion
}

task deleteKubernetesDeployment(type: Exec) {
    commandLine 'kubectl', 'delete', '-f', 'kubernetes-deployment.yaml'
}

task deleteKubernetesService(type: Exec) {
    commandLine 'kubectl', 'delete', '-f', 'kubernetes-service.yaml'
}

task undeploy {
    dependsOn deleteKubernetesDeployment, deleteKubernetesService
}